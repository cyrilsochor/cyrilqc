apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'project-report'
apply plugin: 'application'

description = "Cyril Quality Center - core"

applicationName = "cyrilqc" // used by application plugin

mainClassName = "com.cyrilqc.runner.CyrilQC"

dependencies {
    compile group: 'junit', name: 'junit'
	compile group: 'org.apache.ant', name:'ant'
	runtime group: 'org.apache.ant', name:'ant-junit'  
	runtime group: 'org.apache.ant', name:'ant-junit4'
	runtime group: 'org.apache.ant', name:'ant-jsch'
	runtime group: 'org.apache.ant', name:'ant-apache-log4j'
	runtime group: 'org.apache.ant', name:'ant-apache-bsf'
	runtime group: 'org.apache.ant', name:'ant-apache-bcel'
	runtime group: 'org.apache.ant', name:'ant-apache-xalan2'
	runtime group: 'ant-contrib', name:'ant-contrib', version:'1.0b3', transitive: false
//	testRuntime group:'ant4eclipse', name:'ant4eclipse', version:'0.4.2' //version:'0.5.0.rc1'  
//	compile group: 'org.slf4j', name:'slf4j-log4j12', version:'1.7.2'
}


task testIntegration ( dependsOn: installApp, description: "Runs the integration tests." ) << {
	testResultsDir.mkdirs()
	def outFile = new File(testResultsDir, "integration-test-out.txt" )
	def outStream = new FileOutputStream( outFile )
	exec(){
		workingDir "src/test-integration/resources"
		commandLine new File(buildDir, "/install/" + applicationName + "/bin/" + applicationName).absolutePath
		standardOutput = outStream
		errorOutput = outStream
	}
	logger.info "Integration test output written to " + outFile.absolutePath 
}

check.dependsOn testIntegration

applicationDistribution.from(javadoc) {
    into "javadoc"
}

task dist( dependsOn: distZip) {
	copy {
		from libsDir
    	into distsDir
    }
}

task all (dependsOn: [assemble, check, install, dist]) {
}
 
/* obsolete

jar {
	from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
}

task testBuildSimple << {
	ant.exec(
			executable: "ant",
			failonerror: "true",
		){
		arg( value:"-f")
		arg( value:"src/test/resources/build-simple.xml")
		arg( value:"-Dbasedir=/data/sochor/workspaces/cyrilqc/cyrilqc-core" )
	}
}


task listJars << {
	def outFile = new File(buildDir,"cyrilqc-client.xml")
	outFile.withWriter { out ->
		out.println "<project>"
		out.println "	<path id=\"cyrilqc.client.path\">"
		out.println "		<pathelement path=\"build/libs/cyrilqc-core.jar\"/>"
	    configurations.compile.each { File file -> out.println "		<pathelement path=\"${file.path}\"/>" }
		out.println "	</path>"
		out.println "</project>"
	}
	logger.info "Libraries written to " + outFile.absolutePath 
}

assemble.dependsOn listJars,testBuildSimple 


*/

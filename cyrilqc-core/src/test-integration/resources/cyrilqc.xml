<project 
	name="core-integration-test"
	xmlns:cqc="antlib:com.cyrilqc.core"
	xmlns:ac="antlib:net.sf.antcontrib"
	>
	<property name="cyrilqc.dir" value="${basedir}/../../.."/>
	<property name="build.dir" value="${cyrilqc.dir}/build"/>
	<property name="test.results.dir" value="${build.dir}/test-results"/>
	<property name="test.normalized.dir" value="${build.dir}/test-results-normalized"/>

	<target name="setUp">
		<mkdir dir="${test.results.dir}"/>
	</target>
	
	<target name="multitest">
		<ac:foreach target="onetest" param="test.project.file" inheritrefs="true">
			<path>
				<fileset dir="">
					<include name="cyrilqc-*.xml"/>
				</fileset>
			</path>
		</ac:foreach>
	</target>
	
	<target name="onetest" depends="setUp">
		<basename property="project" file="${test.project.file}" suffix=".xml"/>
		<cqc:test name="${project}">
			<property name="project" value="cyrilqc-simple"/>
			<junit
					fork="true"
					printsummary="true" 
					haltonfailure="false"
					haltonerror="false"
				>
				<test name="com.cyrilqc.runner.junit4.CyrilQCJUnit4Test" todir="${test.results.dir}"  outfile="TEST-${project}" />
				<formatter type="plain"/>
				<classpath>
					<path path="${java.class.path}"></path>
					<!-- variant 2: use classpath generated by listJars gradle task	<import file="/data/sochor/workspaces/cyrilqc/cyrilqc-core/build/cyrilqc-client.xml"/> -->
					<!-- variant 3: use classpath of eclipse project <ae:getEclipseClasspath xmlns:ae="antlib:net.sf.ant4eclipse" workspace="${cyrilqc.dir}/.." projectName="cyrilqc-core" pathId="eclipse.cyrilqc.path"/> -->
					<!-- variant 4: use all libs in installation directory <path id="cyrilqc.path"><fileset dir="${build.dir}/install/cyrilqc/lib"/></path>	-->		                         
				</classpath>
				<sysproperty key="cyrilqc.project.file" value="${project}.xml"/>
			</junit>
			<copy file="${test.results.dir}/TEST-${project}.txt" tofile="${test.normalized.dir}/TEST-${project}.txt">
				<filterchain>
					<tokenfilter>
						<replaceregex pattern="Time elapsed: (.*) sec" replace="Time elapsed: X.XX sec" flags="g"/>
			    		<replaceregex pattern="took (.*) sec" replace="took X.XX sec" flags="g"/>
			    		<replaceregex pattern="Loading project (.*)/" replace="Loading project XXX/" flags="g"/>
			    		<replaceregex pattern="^Total time: (.*)" replace="Total time: X seconds" flags="g"/>
					</tokenfilter>
					<linecontainsregexp negate="true">
					  <regexp pattern="\w*at (.*)\(.*\).*"/>
					</linecontainsregexp>
				</filterchain>
			</copy>
			<cqc:assertfileequals expected="TEST-${project}.txt" actual="${test.normalized.dir}/TEST-${project}.txt"/>
		</cqc:test>
	</target>
</project>